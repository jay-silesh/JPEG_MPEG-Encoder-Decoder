import java.awt.*;
import java.awt.image.*;
import java.io.*;
import javax.swing.*;


public class imageReader {

   static int divide_size;
   static JFrame frame;
   static JLabel label,label2;
   static int width,height;
   static BufferedImage img;
   
   public static void main(String[] args) {
   	

/*	String fileName = args[0];
   	int width = Integer.parseInt(args[1]);
	int height = Integer.parseInt(args[2]);
*/
	   
	String fileName="nimage1.rgb";
	width=352;
	height=288;
	
	/*String fileName="image1.rgb";
	width=640;
	height=480;
	*/
	
	
	divide_size=(width*height)/64;
	double[][][]sub_blocks_ro= new double[divide_size][8][8];
	double[][][]sub_blocks_go= new double[divide_size][8][8];
	double[][][]sub_blocks_bo= new double[divide_size][8][8];
		
	double[][][]sub_blocks_r_DCT= new double[divide_size][8][8];
	double[][][]sub_blocks_g_DCT= new double[divide_size][8][8];
	double[][][]sub_blocks_b_DCT= new double[divide_size][8][8];
	
	
	double [][][]sub_blocks_r_iDCT= new double[divide_size][8][8];
	double [][][]sub_blocks_g_iDCT= new double[divide_size][8][8];
	double [][][]sub_blocks_b_iDCT= new double[divide_size][8][8];
	
	img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	BufferedImage img2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	
	BufferedImage img_ro = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	BufferedImage img_go = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	BufferedImage img_bo = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

	double[][] ro=new double[height][width];
	double[][] go=new double[height][width];
	double[][] bo=new double[height][width];
	
	int[][][] sub_blocks_DCT=new int[divide_size][8][8];
	int[][][] sub_blocks_iDCT=new int[divide_size][8][8];
	int[] sub_blocks_1d=new int[height*width];
	
   

    try {
	    File file = new File(fileName);
	    InputStream is = new FileInputStream(file);

	    long len = file.length();
	    byte[] bytes = new byte[(int)len];
	    
	     
	    int offset = 0;
        int numRead = 0;
        while (offset < bytes.length && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
    
    		
        
    	int ind = 0;
		for(int y = 0; y < height; y++){
	
			for(int x = 0; x < width; x++){
		 
				byte a = 0;
				byte r = bytes[ind];
				byte g = bytes[ind+height*width];
				byte b = bytes[ind+height*width*2]; 
				
				int pix = 0xff000000 | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
				//int pix = ((a << 24) + (r << 16) + (g << 8) + b);
		
		/*		if(r<0)
					r=(byte) (r+255);
				if(g<0)
					g=(byte) (g+255);
				if(b<0)
					b=(byte) (b+255);
		*/		
				img.setRGB(x,y,pix);
				img_ro.setRGB(x, y, r);
				img_go.setRGB(x, y, g);
				img_bo.setRGB(x, y, b);
				
				ro[y][x]=r;
				go[y][x]=g;
				bo[y][x]=b;
				
				ind++;
			}
		}
		
		
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
    
   // divide_image(img_ro,sub_blocks_ro);
   // divide_image(img_go,sub_blocks_go);
   // divide_image(img_bo,sub_blocks_bo);
    
    
    divide_image(ro,sub_blocks_ro);
    divide_image(go,sub_blocks_go);
    divide_image(bo,sub_blocks_bo);
    
  //  calculate_dct(sub_blocks_ro,sub_blocks_r_DCT);
  //  calculate_dct(sub_blocks_go,sub_blocks_g_DCT);
   // calculate_dct(sub_blocks_bo,sub_blocks_b_DCT);
    
    
  //  calculate_idct(sub_blocks_r_DCT,sub_blocks_r_iDCT);
  //  calculate_idct(sub_blocks_g_DCT,sub_blocks_g_iDCT);
   // calculate_idct(sub_blocks_b_DCT,sub_blocks_b_iDCT);
  
  //  merge_3darrays(sub_blocks_r_DCT,sub_blocks_g_DCT,sub_blocks_b_DCT,sub_blocks_DCT);
    merge_3darrays(sub_blocks_ro,sub_blocks_go,sub_blocks_bo,sub_blocks_DCT);
  //  merge_3darrays(sub_blocks_r_iDCT,sub_blocks_g_iDCT,sub_blocks_b_iDCT,sub_blocks_DCT);
    
 
    //Quantization of the matrix... in the array itself
/*    if(quantize_n!=0)
      quantize(sub_blocks_DCT,quantize_n);
*/    
        //dequantize(sub_blocks_DCT,quantize_n);
    
    
   convert_3d_img(sub_blocks_DCT,img2);
    
    frame = new JFrame();
    label = new JLabel(new ImageIcon(img));
    frame.getContentPane().add(label, BorderLayout.WEST);
    frame.pack();
    frame.setVisible(true);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  
   
    
    label2 = new JLabel(new ImageIcon(img2));
    frame.getContentPane().add(label2, BorderLayout.EAST);
    frame.pack();
    frame.setVisible(true);
    
}
  
   




static void merge_3darrays(double[][][] sub_blocks_r_DCT,double[][][] sub_blocks_g_DCT, double[][][] sub_blocks_b_DCT,int[][][] sub_blocks_DCT) {
	
	int q,x,y;
	
	for(q=0;q<divide_size;q++)
	{
		for(y=0;y<8;y++)
		{
			for(x=0;x<8;x++)
			{
				byte a = 0;
				byte r =  (byte) sub_blocks_r_DCT[q][y][x];
				byte g =  (byte) sub_blocks_g_DCT[q][y][x];
				byte b =  (byte) sub_blocks_b_DCT[q][y][x]; 
				
				int pix = 0xff000000 | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
				
				sub_blocks_DCT[q][y][x]=pix;
			}
		}
	}
	
}



static void convert_3d_img(int[][][] array_3d, BufferedImage img_temp) {
	    
		int [] array_1d=new int[width*height];
	    convert_3d_1d(array_3d,array_1d);
	    array_to_img(array_1d,img_temp);    
}




static void convert_3d_1d(int[][][] array_3d,int[] array_1d) {
	
	 int hn=height/8;
	 int wn=width/8;
	 int main_q=0,q=0;
	 int i,j,x,y;
	 int count=0;
	 for(j=0;j<hn;j++)
	 {
		 main_q=j*wn;
		 for(y=0;y<8;y++)
		 {
			 q=main_q;
			 for(i=0;i<wn;i++)
			 {
				 for(x=0;x<8;x++)
				 {
					 array_1d[count++]=array_3d[q][y][x];
				 }
				 q++;
			 }
		 }
	 }
	 
	
}

static void array_to_img(int[] sub_blocks_1d,BufferedImage img2) {
	
	int count=0;
	for(int y = 0; y < height; y++){

		for(int x = 0; x < width; x++){
	 
			img2.setRGB(x,y,sub_blocks_1d[count++]);
			
		}
	}
}

static void calculate_dct(byte[][][] sub_blocks, double[][][] sub_blocks_DCT) {
	
	   double sum_y=0,sum_x=0,temp;
	   int q,u,v,x,y;
	   
	   for(q=0;q<divide_size;q++)
	   {
		   for(v=0;v<8;v++)
		   {
			   for(u=0;u<8;u++)
			   {
				   sum_x=0;
				   for(x=0;x<8;x++)
				   {
					   sum_y=0;
					   for(y=0;y<8;y++)
					   {
						   sum_y=(sum_y)*
								   (sub_blocks[q][y][x])*
								   (Math.cos((((2*x)+1)*u*Math.PI))/16)*
								   (Math.cos((((2*y)+1)*v*Math.PI))/16);
					   }
					   sum_x+=sum_y;
				   }
				   if(u==0 || v==0)
					   temp=1/4;
				   else
					   temp=(1/4)*(1/(Math.sqrt(2)));
				   sub_blocks_DCT[q][v][u]= (byte) ((sum_x)*temp);
				   
			   }
		   }
	   }
	    

}


static void calculate_idct(double[][][] sub_blocks_DCT, double[][][] sub_blocks_iDCT) {
	
	   int q,u,v,x,y;
	   double sum_y=0,sum_x=0,temp;

	   for(q=0;q<divide_size;q++)
	   {
		   for(y=0;y<8;y++)
		   {
			   for(x=0;x<8;x++)
			   {
				   sum_x=0;
				   for(u=0;u<8;u++)
				   {
					   sum_y=0;
					   for(v=0;v<8;v++)
					   {
						   if(u==0 || v==0)
							   temp=1/4;
						   else
							   temp=(1/4)*(1/(Math.sqrt(2)));
						   
						   sum_y=(temp)*(sum_y)*
								   (sub_blocks_DCT[q][v][u])*
								   (Math.cos((((2*x)+1)*u*Math.PI))/16)*
								   (Math.cos((((2*y)+1)*v*Math.PI))/16);
					   }
					   sum_x+=sum_y;
				   }
				   sub_blocks_iDCT[q][y][x]=(int) ((1/4)*sum_x);
			   }
		   }
	   }
	   
	   
	   
	   
}






   static void divide_image(double[][] ro, double[][][] sub_blocks_ro)
   {
	  int xo=0,yo=0,i=0,j=0,x=0,y=0,q=0;
	  int hn=height/8;
	  int wn=width/8;
	  for(j=0;j<hn;j++)
	  {
		  for(i=0;i<wn;i++)
		  {
			  for(y=0,yo=(j*8);(y<8)&&(yo<height);yo++,y++)
			  {
				  for(x=0,xo=(i*8);(x<8)&&(xo<width);xo++,x++)
				  {
					  sub_blocks_ro[q][y][x]=(byte) ro.getRGB(xo, yo);
				  }
			  }
			  q++;
		  }
	  }
	  
   }
   
   static void dequantize(int[][][] sub_blocks_DCT,int n) {
		// TODO Auto-generated method stub
		int q,x,y;
		for(q=0;q<divide_size;q++)
		{
			for(y=0;y<8;y++)
			{
				for(x=0;x<8;x++)
				{
					
					sub_blocks_DCT[q][y][x]=(int) (sub_blocks_DCT[q][y][x]*(Math.pow(2, n)));
				}
			}
		}
		
	}



	static void quantize(int[][][] sub_blocks_DCT,int n) {
			//F'[u, v] = round ( F[u, v] / 2N).
		int q,x,y;
		for(q=0;q<divide_size;q++)
		{
			for(y=0;y<8;y++)
			{
				for(x=0;x<8;x++)
				{
					
					sub_blocks_DCT[q][y][x]=(int) (sub_blocks_DCT[q][y][x]/(Math.pow(2, n)));
				}
			}
		}
		
	}
/*Repeated functions..****************************************************************************************/	
/*************************************************************************************************************/
	
	static void divide_image(byte[][] img_temp, byte[][][] sub_blocks)
	   {
		  int xo=0,yo=0,i=0,j=0,x=0,y=0,q=0;
		  int hn=height/8;
		  int wn=width/8;
		  for(j=0;j<hn;j++)
		  {
			  for(i=0;i<wn;i++)
			  {
				  for(y=0,yo=(j*8);(y<8)&&(yo<height);yo++,y++)
				  {
					  for(x=0,xo=(i*8);(x<8)&&(xo<width);xo++,x++)
					  {
						  sub_blocks[q][y][x]=(byte) img_temp[yo][xo];
					  }
				  }
				  q++;
			  }
		  }
		  
	   }
	static void dequantize(int[][][] sub_blocks_DCT,int[][][] sub_blocks_qDCT,int n) {
		//F'[u, v] = round ( F[u, v] / 2N).
		int q,x,y;
		for(q=0;q<divide_size;q++)
		{
			for(y=0;y<8;y++)
			{
				for(x=0;x<8;x++)
				{
					
					sub_blocks_qDCT[q][y][x]=(int) (sub_blocks_DCT[q][y][x]*(Math.pow(2, n)));
				}
			}
		}

	}


	static void quantize(int[][][] sub_blocks_DCT,int[][][] sub_blocks_qDCT,int n) {
		//F'[u, v] = round ( F[u, v] / 2N).
		int q,x,y;
		for(q=0;q<divide_size;q++)
		{
			for(y=0;y<8;y++)
			{
				for(x=0;x<8;x++)
				{
					
					sub_blocks_qDCT[q][y][x]=(int) (sub_blocks_DCT[q][y][x]/(Math.pow(2, n)));
				}
			}
		}

	}
   
   
   
}


